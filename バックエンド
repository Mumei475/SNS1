import os
import uuid
from flask import Flask, request, redirect, url_for, render_template, flash
from flask_uploads import UploadSet, configure_uploads, IMAGES
from werkzeug.utils import secure_filename

app = Flask(__name__)
app.secret_key = 'supersecretkey'

# Configure the image upload set
photos = UploadSet('photos', IMAGES)
app.config['UPLOADED_PHOTOS_DEST'] = 'uploads'
configure_uploads(app, photos)

# In-memory storage for users, posts, invitations, and notifications
users = {}
posts = []
invitations = {}
notifications = []

class SocialPlatform:
    def invite_user(self, username, link):
        invitation_id = str(uuid.uuid4())
        if username in invitations:
            invitations[username].append((invitation_id, link))
        else:
            invitations[username] = [(invitation_id, link)]
        return invitation_id

    def create_post(self, username, content, photo=None, link=None, video=None):
        post = {
            "id": len(posts),
            "username": username,
            "content": content,
            "photo": photo,
            "link": link,
            "video": video,
            "comments": [],
            "likes": 0
        }
        posts.append(post)

    def view_posts(self):
        return posts

    def add_comment(self, post_id, comment):
        if post_id < len(posts):
            posts[post_id]["comments"].append(comment)

    def add_like(self, post_id):
        if post_id < len(posts):
            posts[post_id]["likes"] += 1

    def send_notification(self, message):
        notifications.append(message)

    def send_inquiry(self, username, message):
        inquiry = {"username": username, "message": message}
        notifications.append(inquiry)

    def add_user(self, username, email):
        if username in users:
            return False
        users[username] = {"email": email}
        return True

platform = SocialPlatform()

@app.route('/')
def index():
    return render_template('index.html', posts=platform.view_posts(), notifications=notifications)

@app.route('/invite', methods=['POST'])
def invite_user():
    username = request.form['username']
    link = request.form['link']
    invitation_id = platform.invite_user(username, link)
    flash(f'Invitation sent to {username} with ID {invitation_id}')
    return redirect(url_for('index'))

@app.route('/post', methods=['POST'])
def create_post():
    username = request.form['username']
    content = request.form['content']
    photo = request.files.get('photo')
    photo_filename = photos.save(photo) if photo else None
    platform.create_post(username, content, photo_filename, request.form['link'], request.form['video'])
    flash('Post created successfully!')
    return redirect(url_for('index'))

@app.route('/comment/<int:post_id>', methods=['POST'])
def add_comment(post_id):
    comment = request.form['comment']
    platform.add_comment(post_id, comment)
    flash('Comment added successfully!')
    return redirect(url_for('index'))

@app.route('/like/<int:post_id>', methods=['POST'])
def add_like(post_id):
    platform.add_like(post_id)
    flash('Post liked successfully!')
    return redirect(url_for('index'))

@app.route('/register', methods=['POST'])
def register_user():
    username = request.form['username']
    email = request.form['email']
    if platform.add_user(username, email):
        flash('User registered successfully!')
    else:
        flash('Username already taken.')
    return redirect(url_for('index'))

if __name__ == '__main__':
    if not os.path.exists(app.config['UPLOADED_PHOTOS_DEST']):
        os.makedirs(app.config['UPLOADED_PHOTOS_DEST'])
    app.run(debug=True)
