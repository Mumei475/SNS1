import os
import uuid
from flask import Flask, request, redirect, url_for, render_template, flash
from flask_uploads import UploadSet, configure_uploads, IMAGES
from werkzeug.utils import secure_filename

app = Flask(__name__)
app.secret_key = 'supersecretkey'

# Configure the image upload set
photos = UploadSet('photos', IMAGES)
app.config['UPLOADED_PHOTOS_DEST'] = 'uploads'
configure_uploads(app, photos)

# In-memory storage for users, posts, invitations, and notifications
users = {}
posts = []
invitations = {}
notifications = []

class SocialPlatform:
    def invite_user(self, username, link):
        invitation_id = str(uuid.uuid4())
        if username in invitations:
            invitations[username].append((invitation_id, link))
        else:
            invitations[username] = [(invitation_id, link)]
        return invitation_id

    def create_post(self, username, content, photo=None, link=None, video=None):
        post = {
            "id": len(posts),
            "username": username,
            "content": content,
            "photo": photo,
            "link": link,
            "video": video,
            "comments": [],
            "likes": 0
        }
        posts.append(post)

    def view_posts(self):
        return posts

    def add_comment(self, post_id, comment):
        if post_id < len(posts):
            posts[post_id]["comments"].append(comment)

    def add_like(self, post_id):
        if post_id < len(posts):
            posts[post_id]["likes"] += 1

    def send_notification(self, message):
        notifications.append(message)

    def send_inquiry(
